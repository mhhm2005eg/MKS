import os
import Config
import Common

from os.path import basename


Env = Environment()
FileList=['HelloWorld.c', 'Hello.c' ]
ObjectList=[]

ExtensionsToBuild='*.c'
#FilesToBuild=Glob( '.\\Src\\' +ExtensionsToBuild) # Return file objects
FilesToBuild=[]

#Program(OutFile, FileList) # Produce .exe file

#Env.CCFLAGS.append('-DHELLO') #Otions for the compiler
#-------------------------------------------------------------------
# H files Dirs
#-------------------------------------------------------------------

HfilesDirs = Common.Getfolders(Config.RecursiveHeaderFolders, Config.HeaderFolders)

#print(HfilesDirs, 'HfilesDirs')
#-------------------------------------------------------------------
# C files Dirs
#-------------------------------------------------------------------
FilesToBuild=Common.Getfiles(Config.RecursiveSourceFolders, Config.SourceFolders, Config.SourceFiles, ExtensionsToBuild)
#print(FilesToBuild, 'FilesToBuild')
#-------------------------------------------------------------------
# Lib files Dirs
#-------------------------------------------------------------------
Libfiles=Common.Getfiles(Config.RecursiveLibFolders, Config.LibFolders, Config.LibFiles, '*.lib')
#print(Libfiles, 'Libfiles')
#-------------------------------------------------------------------
# Compiling the C files
#-------------------------------------------------------------------
for Cfile in FilesToBuild:
	Objfile=str(Cfile).replace('.c','.o')
	#print(str(Cfile))
	Objfile1 = basename(Objfile)
	#print(Objfile)
	ObjectList.append(Object(target=File(str(Config.ObjDir)+Objfile1),source=Cfile, CPPPATH=HfilesDirs))

#print (str(Config.ObjDir)+Objfile1)

#Program(target = Config.OutFile, source = ObjectList)
#StaticLibrary(target = Config.LibFile, source = ObjectList)	
#SharedLibrary(target = Config.DllFile, source = ObjectList)

LibList=[]
for Comp in Config.ComponentsList:
	Sources =Common.Getfiles(["./../../../../../04_Engineering/01_Source_Code/algo/"+Comp], [],[],"*.c")
	Headers =Common.Getfolders(["./../../../../../04_Engineering/01_Source_Code/algo/"+Comp], [])
	GenericHeaders=Common.Getfolders(Config.RecursiveHeaderFolders, Config.HeaderFolders)
	if Config.Includedict[Comp]:
		print(Config.Includedict[Comp])
		HeadersSpecific=Common.Getfolders(Config.Includedict[Comp], [])
	Headers = Common.ListAppend(Headers, HeadersSpecific)
	Headers = Common.ListAppend(Headers, GenericHeaders) #RTE files
	#for Cfile in Sources:
		#Objfile=str(Cfile).replace('.c','.o')
		#Objfile1 = basename(Objfile)
		#ObjectList.append(Object(target=File(str(Config.ObjDir)+Config.dict[Comp]+'/'+Objfile1),source=Cfile, CPPPATH=Headers))
	print("--------------1----------------------")
	print(Comp)
	print(Sources)
	print("--------------2----------------------")

	#print(Headers)
	SharedLibrary(target=Config.DllFile+Comp, source=Sources, CPPPATH=Headers)
	#StaticLibrary(target = Config.LibFile+Comp, source = Sources, CPPPATH=Headers)
	#LibList.append(Config.LibFile+"lib"+Comp+'.a')

#Program(target = Config.OutFile, source = LibList)

#Program(target = OutFile, source = FilesToBuild) # Produce .exe file from a patern

#Library(target = LibFile, source = FilesToBuild) #lib

#StaticLibrary(target = LibFile, source = FilesToBuild) #lib

#SharedLibrary(target = DllFile, source = FilesToBuild) # DLL
#Object(FileList) # Produce the obj files only


